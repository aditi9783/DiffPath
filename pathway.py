# Generate graph from KEGG kgml file and expression data file

import xml.etree.ElementTree as ET
import networkx as NX
import itertools

class pathway:
    """
    This class reads KGML files and generates traversable graph
    """

    def getpathway( self ):
        """
        Parameters: 
		self
	Output:
		pathway as networkx object
	Description:
		reads the tree generated by xml file and renders the pathway as a graph
	""" 
        G = NX.Graph() # create graph object
        for child in self.root:
             if (child.tag == "entry"):
                 entryid = child.attrib['id']
                 G.add_node(entryid)
                 if (child.attrib['type'] == "gene"):
                     for gc in child:
                         if (gc.tag == "graphics"):
                             genelist = gc.attrib['name'].split(', ')
                             self.genedict[entryid] = genelist 
                             print entryid, genelist
                 # elif (child.attrib['type'] == "group"):
             elif (child.tag == "relation"):
                 node1 = child.attrib['entry1']
                 node2 = child.attrib['entry2']
                 for gc in child:
                     if (gc.tag == "subtype"):
                         edgetype = gc.attrib['name']
                 #print node1, node2, edgetype
                 G.add_edge(node1, node2, type = edgetype) 
	return G;   

    def deapFormat( self, fname ):
        counter = 1;
        for g in self.connectedpaths:
            if (len(g) > 2): # only look at connected subgraphs with > 2 nodes
                # print "subgraph\n";
                newf = fname+"_"+str(counter)+".deap";
                counter += 1;
                fh = open(newf, 'w')
                subgraph = self.pathwaygraph.subgraph(g)
                # print subgraph.nodes();
                # print subgraph.edges(data=True);
                for e in subgraph.edges(data=True):
                    if e[0] in self.genedict and e[1] in self.genedict: # if the nodes exist in genedict. I'm only saving nodes that are genes, and not compounds. But all edges are saved, including compounds'.
                        product1 = '\t'.join( self.genedict[ e[0] ] )
                        product2 = '\t'.join( self.genedict[ e[1] ] )
                        if (e[2]['type'] == "inhibition"): # only inhibition edges are deemed False
                            fh.write(product1+"\t::"+product2+"\t::False\n")
                        else:
                            fh.write(product1+"\t::"+product2+"\t::True\n")

    def getSubgraphs( self, nnodes ): # find all connected subgraphs of size nnodes
        all_subg = []
        for path in self.connectedpaths: # for all connected components in the pathway file (path only has set of nodes, no edge information)
            g = self.pathwaygraph.subgraph(path) # get the graph information for path (nodes + edges + attributes)
            if (len(g.nodes()) >= nnodes): # only those subgraphs that have at least nnodes nodes
                # print '\n', g.nodes();
                for sub_nodes in itertools.combinations(g.nodes(),nnodes): # for all combinations of nnodes 
                    subgraph = g.subgraph(sub_nodes)
                    if NX.is_connected(subgraph):
                        print subgraph.edges()
                        all_subg.append( subgraph )
        return all_subg


    def __init__( self, xml_file ): # read kegg xml file and parse it
        """
        Parameters: self, KGML file name

        Returns: nothing

        Description: Initializes self.file, self.tree, self.root
        """
        tree = ET.parse(xml_file)
        root = tree.getroot()
        self.file = xml_file
        self.tree = tree
        self.root = root
        self.genedict = {} # key is id, value is gene name and its aliases
        self.pathwaygraph = self.getpathway() # convert kgml pathway file into a graph object
        self.connectedpaths = NX.connected_components( self.pathwaygraph )
        self.all_subg_size3 = self.getSubgraphs( 3 )
        self.all_subg_size4 = self.getSubgraphs( 4 )
        return self.deapFormat(xml_file)
